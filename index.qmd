---
title: "Derby (LIVE)"
author: "by Beep Boop"
format: 
  dashboard:
    theme: pulse
    self-contained: true
server: shiny
---

<!-- Background and App -->


<style>

body {
  background-color: "primary";
}

/* Set the font size for the entire app */
body, h1, h2, h3, h4, h5, h6, p {
  font-size: 26px !important;
}

.sidebar {
  background-color: #F2CA7E !important;
  font-size: 18px;
  width: 100% !important;
}

<!-- .toolbar { -->
<!--   background-color: #A2C5C9 !important; -->
<!--   color: black; -->
<!--   font-size: 26px !important; -->
<!--   width: 500px !important; -->
<!-- } -->

.toolbar {
  background-color: #A2C5C9 !important;
  color: black;
  font-size: 24px !important;
  width: 100% !important;
  display: flex;
  flex-direction: column;
  gap: 20px;
  margin: 0;
  padding: 20px;
  box-sizing: border-box;
  justify-content: space-between !important;
  align-items: stretch !important;
}

.toolbar-header {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 20px;
}

.toolbar-content {
  display: flex;
  flex-direction: column;
  gap: 24px !important;
}

/* Change text size for other Shiny elements */
.input-group input,
.input-group select,
.input-group textarea,
.btn,
.form-control {
  font-size: 24px !important;
}

<!-- /* Optional: Change text size for buttons */ -->
<!-- .btn { -->
<!--   font-size: 24px !important; -->
<!-- } -->

.value-box-title {
  font-size: 48px !important;
  text-align: left;
}

</style>


```{r}
#| context: setup
library(ggplot2)
library(shiny)
library(dplyr)

# # custom functions
# source(here::here("./functions/read_s3.R"))
# source(here::here("./functions/plot_algo.R"))
# source(here::here("./functions/re_tally.R"))
# source(here::here("./functions/label_event.R"))
# # # for debug purpose, comment out in production
# setup_env <- environment()
```

```{r get_data}
roster <- read.csv(
  here::here(
    "./data/roster.csv"
  ),
  na.strings = c("", " ")
) |> 
  as_tibble()

# add check: column `team` should exist

team_names <- roster |> 
  pull(team) |> 
  na.omit() |> 
  unique()

n_teams <- length(team_names)

if (n_teams != 2) {
  cli::cli_abort(
    message = glue::glue(
      "Error: Number of teams found: {n_teams}\n 
      It should be 2! Check '/data/roster.csv'"
    )
  )
}

if (!c("hard") %in% team_names) {
  cli::cli_abort(
    message = glue::glue(
      "Error: One of the teams should be named 'hard'"
    )
  )
}


```


```{r}
#| context: data

# Get names of teams
team1 <- "hard"
team2 <- setdiff(team_names, team1)

# Get names and numbers of players
players1 <- roster |> filter(team == team1) |> pull(player_number)
players2 <- roster |> filter(team == team2) |> pull(player_number)

# Initialize reactiveValues to store the data
data <- reactiveValues(
  df = data.frame(
    jammer1   = character(),
    blockers1 = character(),
    points1   = integer(),
    jammer2   = character(),
    blockers2 = character(),
    points2   = integer(),
    stringsAsFactors = FALSE
  )
)
```

## {.sidebar}

### Team: `r team1`

```{r}
selectInput(
  "jammer1", 
  glue::glue("Select Jammer ({team1})"), 
  choices = players1,
  multiple = FALSE
)
checkboxGroupInput(
  "blockers1",
  glue::glue("Select Blockers ({team1})"),
  choices = players1,
  # multiple = TRUE
  inline = TRUE
)
```

### Team `r team2`

```{r}
selectInput(
  "jammer2", 
  glue::glue("Select Jammer ({team2})"), 
  choices = players2,
  multiple = FALSE
)
checkboxGroupInput(
  "blockers2",
  glue::glue("Select Blockers ({team2})"),
  choices = players2,
  # multiple = TRUE
  inline = TRUE
)

```

# {.toolbar}

```{r}
tags$div(
  style = "
  background-color: #A2C5C9; 
  color: black; 
  font-size: 20px; 
  width: 100%; 
  display: flex; 
  flex-direction: column; 
  gap: 20px !important; 
  margin: 4; 
  padding: 10px; 
  box-sizing: border-box;",
  
  tags$div(
    class = "toolbar-header",
    # tags$h1("Points: "),
    selectInput(
      inputId = "points1",
      label = glue::glue("{team1}: "),  
      choices = c(0:40),  
      selected = 0,
      selectize = FALSE,
      width = "100px"
    ),
    selectInput(
      inputId = "points2",
      label = glue::glue("{team2}: "),  
      choices = c(0:40),  
      selected = 0,
      selectize = FALSE,
      width = "100px"
    )
  ),
  
  tags$div(
    class = "toolbar-content",
    selectInput(
      "lead",
      "Who got lead ?",
      choices = c(team1, team2, "none"),
      selected = "none",
      multiple = FALSE,
      selectize = FALSE,
      width = "100%"
    ),
    
    selectInput(
      "jammer_penalty",
      "Penalty (jammer) ?",
      choices = c("none", team1, team2, "both"),
      selected = "none",
      multiple = FALSE,
      selectize = FALSE,
      width = "100%"
    ),
    
    actionButton(
      "save", 
      "Save data", 
      icon("save"), 
      style="
        color: #fff; 
        background-color: #337ab7; 
        border-color: #2e6da4; 
        width: 100%;
      "
    ),
    
    actionButton(
      "clear", 
      "Clear last entry", 
      icon("undo"), 
      style="
        color: #fff; 
        background-color: #C13C37; 
        border-color: red; 
        width: 100%;
      "
    )
  )
)

```

# Scoreboard

## Row 

```{r}
#| content: valuebox
#| title: "Starlets"
#| color: "primary"
shinydashboard::valueBoxOutput("valueBox1")
```


```{r}
#| content: valuebox
#| title: "Opponent"
#| color: "dark"
shinydashboard::valueBoxOutput("valueBox2")
```

## Column

```{r}
plotOutput("plot")
```

# Data

```{r}
div(tableOutput("data_saved"), style = "font-size:40%")
```


```{r}
#| context: server

observeEvent(input$save, {
  # Save data to the reactive data frame
  new_row <- data.frame(
    jammer1   = input$jammer1,
    jammer2   = input$jammer2,
    blockers1 = paste(input$blockers1, collapse = ", "),
    blockers2 = paste(input$blockers2, collapse = ", "),
    points1   = as.integer(input$points1),
    points2   = as.integer(input$points2),
    stringsAsFactors = FALSE
  )
  data$df <- bind_rows(data$df, new_row)
})

observeEvent(input$clear, {
  # Clear only the last saved row
  if (nrow(data$df) > 0) {
    data$df <- data$df[-nrow(data$df), ]
  }
})

output$data_saved <- renderTable({
  data$df |> 
    mutate(
      jam_number = row_number()
    ) |> 
    select(
      jam_number,
      matches("^points"),
      matches("1$"),
      everything()
    )
})

tidy_dat <- reactive({
  data$df |> 
    mutate(
      jam_number = row_number()
     ) |>
    select(
      jam_number,
      points1,
      points2
    ) |> 
    tidyr::pivot_longer(
      cols = c(points1, points2),
      names_to = "team",
      values_to = "points"
    ) |> 
    mutate(
      team = if_else(
        team == "points1",
        "HARD",
        "Opponent"
      )
    ) |> 
    group_by(
      team
    ) |> 
    mutate(
      cum_points = cumsum(points)
    ) |> 
    ungroup()
})
  
# current scores
scores_now = reactive({
  if (nrow(tidy_dat()) > 0) {
    tidy_dat() |> 
      group_by(team) |> 
      reframe(
        points = max(cum_points)
      ) |> 
      pull(points)
  } else {
    c(0, 0)
  }
})

output$valueBox1 <- shinydashboard::renderValueBox({
  shinydashboard::valueBox(
    subtitle = tags$p(
      glue::glue(""),
      style = "font-size: 0.1% !important;"
    ),
    value = tags$p(
      scores_now()[1], 
      style = "
        font-size: 400% !important;
      "
    )
  )
})

output$valueBox2 <- shinydashboard::renderValueBox({
  shinydashboard::valueBox(
    subtitle = tags$p(
      glue::glue(""),
      style = "font-size: 0.1% !important;"
    ),
    value = tags$p(
      scores_now()[2], 
      style = "
        font-size: 400% !important;
      "
    )
  )
})
  

output$plot <- renderPlot({
  p <- tidy_dat() |> 
    # mutate(
    #   jam_number = factor(jam_number)
    # ) |> 
    ggplot(
      aes(
        x = jam_number,
        y = cum_points,
        color = team,
        group = team,
        fill = team
      )
    ) +
    geom_line(
      linewidth = 3,
      alpha = 0.8
    ) +
    geom_point(
      shape = 21,
      col = "white",
      size = 5,
      alpha = 0.7,
      stroke = 2
    ) +
    labs(
      x = "Jam Number",
      y = ""
    ) +
    scale_y_continuous(
      limits = c(0, max(scores_now()) + 10),
      breaks = scales::breaks_pretty()
    ) +
    scale_x_continuous(
      breaks = scales::breaks_pretty()
    ) +
    theme_minimal(24) +
    scale_fill_manual(
      values = c("#B22EF0", "grey10")
    ) +
    scale_color_manual(
      values = c("#B22EF0", "grey10")
    ) +
    theme(
      legend.position = "none",
      legend.title = element_blank()
    )
  
  print(p)
})

```

