---
title: "Derby"
author: "( LIVE )"
format: 
  dashboard:
    theme: pulse
    self-contained: true
server: shiny
---

<!-- Background and App -->


<style>

body {
  background-color: "primary";
}

/* Set the font size for the entire app */
body, h1, h2, h3, h4, h5, h6, p {
  font-size: 26px !important;
}

.sidebar {
  background-color: #F2CA7E !important;
  font-size: 18px;
  width: 100% !important;
  margin-bottom: 0 !important;
}

<!-- .toolbar { -->
<!--   background-color: #A2C5C9 !important; -->
<!--   color: black; -->
<!--   font-size: 26px !important; -->
<!--   width: 500px !important; -->
<!-- } -->

.dashboard-page {
  width: 100%;
  margin-left: 0;
}

.toolbar {
  background-color: #A2C5C9 !important;
  color: black;
  font-size: 16px; 
  width: 100%;
  display: flex;
  flex-direction: column;
  margin-top: 2px;
  padding: 10px; 
  box-sizing: border-box;
  justify-content: space-between;
  align-items: stretch;
}


@media (min-width: 768px) {

  .dashboard-page {
    width: 130% !important;
    margin-left: -150px;
  }

  .toolbar {
    background-color: #A2C5C9 !important;
    color: black;
    font-size: 24px !important;
    width: 70% !important;
    padding: 30px !important;
  }
}

.toolbar-header {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 20px;
}

.toolbar-content {
  display: flex;
  flex-direction: column;
  gap: 24px !important;
}

/* Change text size for other Shiny elements */
.input-group input,
.input-group select,
.input-group textarea,
.btn,
.form-control {
  font-size: 24px !important;
}

.sweet-alert .confirm {
  color: white !important;
  background-color: green !important;
}
.sweet-alert .cancel {
  color: black !important; 
  background-color: grey !important;
}

<!-- /* Optional: Change text size for buttons */ -->
<!-- .btn { -->
<!--   font-size: 24px !important; -->
<!-- } -->

.value-box-title {
  font-size: 48px !important;
  text-align: left;
}

.radio {
  font-size: 20px !important;
  margin-bottom: -20px !important;
  margin-top: 0;
}

.shiny-plot-output {
  margin-top: -15px !important;
  margin-bottom: -10px !important
}

</style>


```{r}
#| context: setup
library(ggplot2)
library(shiny)
library(dplyr)

for (i in list.files("R", full.names = TRUE)) source(i)

```

```{r get_data}
roster <- read.csv(
  here::here(
    "./data/roster.csv"
  ),
  na.strings = c("", " ")
) |> 
  as_tibble()

# add check: column `team` should exist

team_names <- roster |> 
  pull(team) |> 
  na.omit() |> 
  unique()

n_teams <- length(team_names)

if (n_teams != 2) {
  cli::cli_abort(
    message = glue::glue(
      "Error: Number of teams found: {n_teams}\n 
      It should be 2! Check '/data/roster.csv'"
    )
  )
}

if (!c("hard") %in% team_names) {
  cli::cli_abort(
    message = glue::glue(
      "Error: One of the teams should be named 'hard'"
    )
  )
}


```


```{r}
#| context: data

# Get names of teams
team1 <- "hard"
team2 <- setdiff(team_names, team1)

# Specify team colors
team_colors <- c("#622773", "grey10")

# Get names and numbers of players
# team1: hard
players1 <- roster |> 
  filter(team == team1) |> 
  select(
    player_number,
    player_name
  ) |>
  arrange(
    as.numeric(player_number)
  ) |> 
  pull(player_number)
jammers1 <- roster |> 
  filter(team == team1 & !is.na(jammer)) |> 
  select(
    player_number,
    player_name
  ) |>
  arrange(
    as.numeric(player_number)
  ) |> 
  pull(player_number)
# team2: opponent
players2 <- roster |> 
  filter(team == team2) |> 
  pull(player_number) |>
  as.numeric() |> 
  sort()

# Initialize reactiveValues to store the data
data <- reactiveValues(
  df = data.frame(
    jammer1   = character(),
    blockers1 = character(),
    points1   = integer(),
    jammer2   = character(),
    blockers2 = character(),
    points2   = integer(),
    # jammer thingy
    lead = character(),
    jammer_penalty = character(),
    stringsAsFactors = FALSE
  )
)
```

## {.sidebar}

### `r toupper(team1)`

```{r}
selectInput(
  "jammer1", 
  glue::glue("Select Jammer ({team1})"), 
  choices = jammers1,
  multiple = FALSE
)
checkboxGroupInput(
  "blockers1",
  glue::glue("Select Blockers ({team1})"),
  choices = players1,
  selected = players1,
  inline = TRUE
)

```

### `r toupper(team2)`

```{r}
selectInput(
  "jammer2", 
  glue::glue("Select Jammer ({team2})"), 
  choices = players2,
  multiple = FALSE
)
checkboxGroupInput(
  "blockers2",
  glue::glue("Select Blockers ({team2})"),
  choices = players2,
  selected = players2,
  inline = TRUE
)

# actionButton(
#   "resetapp", 
#   "Reset App", 
#   icon("refresh"), 
#   style="
#     color: #fff; 
#     background-color: #C13C37; 
#     border-color: red; 
#     width: 100%;
#   "
# )
```

# {.toolbar}

```{r}
tags$div(
  style = "
  background-color: #A2C5C9; 
  color: black; 
  font-size: 20px; 
  width: 100%; 
  display: flex; 
  flex-direction: column; 
  gap: 20px !important; 
  box-sizing: border-box;",
  
  tags$div(
    class = "toolbar-header",
    # tags$h1("Points: "),
    selectInput(
      inputId = "points1",
      label = glue::glue("{team1}: "),  
      choices = c(0:40),  
      selected = 0,
      selectize = FALSE,
      width = "100px"
    ),
    selectInput(
      inputId = "points2",
      label = glue::glue("{team2}: "),  
      choices = c(0:40),  
      selected = 0,
      selectize = FALSE,
      width = "100px"
    )
  ),
  
  tags$div(
    class = "toolbar-content",
    selectInput(
      "lead",
      "Lead jammer?",
      choices = c(team1, team2, "none"),
      selected = "none",
      multiple = FALSE,
      selectize = FALSE,
      width = "100%"
    ),
    
    selectInput(
      "jammer_penalty",
      "Penalty jammer ?",
      choices = c("none", team1, team2, "both"),
      selected = "none",
      multiple = FALSE,
      selectize = FALSE,
      width = "100%"
    ),
    
    actionButton(
      "save", 
      "Save data", 
      icon("save"), 
      style="
        color: #fff; 
        background-color: #337ab7; 
        border-color: #2e6da4; 
        width: 100%;
      "
    ),
    
    actionButton(
      "default",
      "Reset defaults",
      icon("refresh"),
      style="
        color: #fff;
        background-color: green;
        border-color: #2e6da4;
        width: 100%;
      "
    ),
    
    actionButton(
      "clear", 
      "Clear last entry", 
      icon("undo"), 
      style="
        color: #fff; 
        background-color: #C13C37; 
        border-color: red; 
        width: 100%;
      "
    )
  )
)

```

# Scoreboard

## Row 

```{r}
#| content: valuebox
#| title: "HARD"
#| color: "primary"
shinydashboard::valueBoxOutput("valueBox1")
```

```{r}
#| content: valuebox
#| title: "Opponent"
#| color: "dark"
shinydashboard::valueBoxOutput("valueBox2")
```

## Column

```{r}
plotOutput("scoreboard")
```

# Jammer

```{r}
# Radio buttons to toggle between plots
radioButtons(
  "plot_choice1", 
  "",
  choices = c(
    "HARD",
    "Opponent"
  ),
  inline = TRUE
)
# Conditional panels to display the chosen plot
conditionalPanel(
  condition = "input.plot_choice1 == 'HARD'",
  plotOutput("jammer_points1")
)
conditionalPanel(
  condition = "input.plot_choice1 == 'Opponent'",
  plotOutput("jammer_points2")
)
```

# Blocker

```{r}
# Radio buttons to toggle between plots
radioButtons(
  "plot_choice2", 
  "",
  choices = c(
    "HARD",
    "Opponent"
  ),
  inline = TRUE
)
# Conditional panels to display the chosen plot
conditionalPanel(
  condition = "input.plot_choice2 == 'HARD'",
  plotOutput("blocker_points1")
)
conditionalPanel(
  condition = "input.plot_choice2 == 'Opponent'",
  plotOutput("blocker_points2")
)
```


# Data

```{r}
div(tableOutput("data_saved"), style = "font-size:40%")
```


```{r}
#| context: server

observeEvent(input$default, {
  updateSelectInput(session, "jammer1", selected = jammers1[1])
  updateCheckboxGroupInput(session, "blockers1", selected = character(0))
  updateSelectInput(session, "jammer2", selected = players2[1])
  updateCheckboxGroupInput(session, "blockers2", selected = character(0))
  updateSelectInput(session, "points1", selected = 0)
  updateSelectInput(session, "points2", selected = 0)
  updateSelectInput(session, "lead", selected = "none")
  updateSelectInput(session, "jammer_penalty", selected = "none")
})

observeEvent(input$save, {
  # Save data to the reactive data frame
  new_row <- data.frame(
    jammer1   = input$jammer1,
    jammer2   = input$jammer2,
    blockers1 = paste(input$blockers1, collapse = ", "),
    blockers2 = paste(input$blockers2, collapse = ", "),
    points1   = as.integer(input$points1),
    points2   = as.integer(input$points2),
    # jammer things
    lead = as.character(input$lead),
    jammer_penalty = as.character(input$jammer_penalty),
    stringsAsFactors = FALSE
  )
  data$df <- bind_rows(data$df, new_row)
})

observeEvent(input$clear, {
  # Clear only the last saved row
  if (nrow(data$df) > 0) {
    data$df <- data$df[-nrow(data$df), ]
  }
})

observeEvent(input$resetapp, {
  shinyalert::shinyalert(
    title = "Confirm App Reset",
    text = "Reset the app and clear all saved data ?",
    type = "warning",
    showCancelButton = TRUE,
    confirmButtonText = "Yes, Reset",
    cancelButtonText = "No, Cancel",
    callbackR = function(x) {
      if (x) {
        data$df <- data$df[0, ]
      }
    }
  )
})

output$data_saved <- renderTable({
  data$df |> 
    mutate(
      jam_number = row_number()
    ) |> 
    select(
      jam_number,
      lead,
      matches("^points"),
      matches("1$"),
      everything()
    )
})

## TRANSFORM (scoreboard) ----
tidy_scoreboard <- reactive({
  data$df |> 
    mutate(
      jam_number = row_number()
     ) |>
    select(
      jam_number,
      points1,
      points2
    ) |> 
    tidyr::pivot_longer(
      cols = c(points1, points2),
      names_to = "team",
      values_to = "points"
    ) |> 
    mutate(
      team = if_else(
        team == "points1",
        "HARD",
        "Opponent"
      )
    ) |> 
    group_by(
      team
    ) |> 
    mutate(
      cum_points = cumsum(points)
    ) |> 
    ungroup()
})

## get current scores ----
scores_now = reactive({
  if (nrow(tidy_scoreboard()) > 0) {
    tidy_scoreboard() |> 
      group_by(team) |> 
      reframe(
        points = max(cum_points)
      ) |> 
      pull(points)
  } else {
    c(0, 0)
  }
})
## generate scoreboard (1) ----
output$valueBox1 <- shinydashboard::renderValueBox({
  shinydashboard::valueBox(
    subtitle = tags$p(
      glue::glue(""),
      style = "font-size: 0.1% !important;"
    ),
    value = tags$p(
      scores_now()[1], 
      style = "
        font-size: 400% !important;
      "
    )
  )
})
## generate scoreboard (2) ----
output$valueBox2 <- shinydashboard::renderValueBox({
  shinydashboard::valueBox(
    subtitle = tags$p(
      glue::glue(""),
      style = "font-size: 0.1% !important;"
    ),
    value = tags$p(
      scores_now()[2], 
      style = "
        font-size: 400% !important;
      "
    )
  )
})
## display scoreboard (worm plot) ----
output$scoreboard <- renderPlot({
  p <- tidy_scoreboard() |> 
    plot_scoreboard(
      team_colors = team_colors
    )
  
  print(p)
})

# JAMMER STATS (HARD) ----
tidy_jammer1 <- reactive({
  data$df |> 
    mutate(
      jam_number = row_number()
    ) |> 
    select(
      jam_number,
      jammer = jammer1,
      lead,
      points1,
      points2,
      jammer_penalty
    ) |> 
    mutate(
      points_diff = points1 - points2
    ) |> 
    group_by(
      jammer
    ) |> 
    reframe(
      n_jams = n(),
      # which_jams = list(jam_number),
      percent_jams_lead = round(
        sum(lead == team1) / n_jams * 100
      ),
      percent_jams_penalty = round(
        sum(jammer_penalty == team1) / n_jams * 100
      ),
      # n_points_list = list(points1),
      n_points_sum = sum(points_diff)
    ) |> 
    mutate(
      team = team1
    )
})

# INDIVIDUAL STATS (Oppo) ----
tidy_jammer2 <- reactive({
  data$df |> 
    mutate(
      jam_number = row_number()
    ) |> 
    select(
      jam_number,
      jammer = jammer2,
      lead,
      points1,
      points2,
      jammer_penalty
    ) |> 
    mutate(
      points_diff = points2 - points1
    ) |> 
    group_by(
      jammer
    ) |> 
    reframe(
      n_jams = n(),
      # which_jams = list(jam_number),
      percent_jams_lead = round(
        sum(lead == team2) / n_jams * 100
      ),
      percent_jams_penalty = round(
        sum(jammer_penalty == team2) / n_jams * 100
      ),
      # n_points_list = list(points1),
      n_points_sum = sum(points_diff)
    ) |> 
    mutate(
      team = team2
    )
    
})

# jammer points (hard)
output$jammer_points1 <- renderPlot({
  p1 <- tidy_jammer1() |> 
    plot_jammer_stats(
      team_color = team_colors[1]
    )

  print(p1)
})


# jammer points (Oppo)
output$jammer_points2 <- renderPlot({
  p2 <- tidy_jammer2() |> 
    plot_jammer_stats(
      team_color = team_colors[2]
    )
    
  print(p2)
})


## Blocker stats (HARD) ----
tidy_blocker1 <- reactive({
  data$df |> 
    mutate(
      jam_number = row_number()
    ) |> 
    select(
      jam_number,
      blocker = blockers1,
      lead,
      points1,
      points2,
      jammer_penalty
    ) |> 
    mutate(
      points_diff = points1 - points2
    ) |> 
    tidyr::separate_longer_delim(
      blocker,
      delim = ", "
    ) |> 
    group_by(
      blocker
    ) |> 
    reframe(
      n_jams = n(),
      # which_jams = list(jam_number),
      percent_jams_lead = round(
        sum(lead == team1) / n_jams * 100
      ),
      percent_jams_penalty = round(
        sum(jammer_penalty == team1) / n_jams * 100
      ),
      # n_points_list = list(points1),
      n_points_sum = sum(points_diff)
    ) |> 
    mutate(
      team = team1
    )
})

# INDIVIDUAL STATS (Oppo) ----
tidy_blocker2 <- reactive({
  data$df |> 
    mutate(
      jam_number = row_number()
    ) |> 
    select(
      jam_number,
      blocker = blockers2,
      lead,
      points1,
      points2,
      jammer_penalty
    ) |> 
    mutate(
      points_diff = points2 - points1
    ) |> 
    tidyr::separate_longer_delim(
      blocker,
      delim = ", "
    ) |> 
    group_by(
      blocker
    ) |> 
    reframe(
      n_jams = n(),
      # which_jams = list(jam_number),
      percent_jams_lead = round(
        sum(lead == team2) / n_jams * 100
      ),
      percent_jams_penalty = round(
        sum(jammer_penalty == team2) / n_jams * 100
      ),
      # n_points_list = list(points1),
      n_points_sum = sum(points_diff)
    ) |> 
    mutate(
      team = team2
    )
    
})

# jammer points (hard)
output$blocker_points1 <- renderPlot({
  p1 <- tidy_blocker1() |> 
    plot_blocker_stats(
      team_color = team_colors[1]
    )

  print(p1)
})


# jammer points (Oppo)
output$blocker_points2 <- renderPlot({
  p2 <- tidy_blocker2() |> 
    plot_blocker_stats(
      team_color = team_colors[2]
    )
    
  print(p2)
})

```

